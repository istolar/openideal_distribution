<?php

/**
 * @file
 * Contains openideal_flavour.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_node_access_records().
 */
function openideal_flavour_node_access_records(NodeInterface $node) {
  $grants = [];
  if (in_array($node->bundle(), ['idea', 'challenge'])) {
    // @TODO: check public/private state here and add additional condition for
    // @TODO: use different grants according to the current flavour.
    $grants[] = [
      'realm' => "openideal_flavor_{$node->bundle()}_realm",
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    ];
  }

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function openideal_flavour_node_grants(AccountInterface $account, $op) {
  $grants = [];
  if ($op == 'view') {
    foreach (['idea', 'challenge'] as $node_type) {
      if ($account->hasPermission("view any {$node_type}")) {
        $grants["openideal_flavor_{$node_type}_realm"] = [1];
      }
    }
  }

  return $grants;
}

///**
// * Implements hook_node_access().
// */
//function openideal_flavour_node_access(NodeInterface $node, $op, AccountInterface $account) {
//  if ($node->bundle() == 'idea' && $op == 'view') {
//    if ($account->hasPermission('view any idea')) {
//      return AccessResult::allowed();
//    }
//
//    return AccessResult::forbidden();
//  }
//
//  return AccessResult::neutral();
//}
//
///**
// * Implements hook_module_implements_alter().
// */
//function openideal_flavour_module_implements_alter(&$implementations, $hook) {
//  if ($hook == 'node_access' && isset($implementations['openideal_flavour'])) {
//    $group = $implementations['openideal_flavour'];
//    unset($implementations['openideal_flavour']);
//    $implementations['openideal_flavour'] = $group;
//  }
//}

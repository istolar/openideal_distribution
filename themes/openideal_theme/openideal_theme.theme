<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function openideal_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openideal_theme_preprocess_page(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface && $node->bundle() == 'idea') {
    $variables['is_idea'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openideal_theme_preprocess_field__comment(&$variables) {
  $node = $variables['element']['#object'];
  $statistics = \Drupal::service('comment.statistics')->read([$node->id() => $node], 'node');
  $variables['comments_count'] = (reset($statistics))->comment_count;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openideal_theme_preprocess_message(&$variables) {
  /** @var \Drupal\message\Entity\Message $message */
  $message = $variables['message'];
  foreach ($variables['content'] as $name => $item) {
    if (strpos($name, 'field') !== FALSE) {
      try {
        $label = $message->{$name}->entity->bundle();
        $variables['entity_label'] = $label;
        $variables['label_class'] = 'message--referenced-label--' . $label;
      }
      catch (\Throwable $e) {
        \Drupal::logger('openideal')->error(t('Could not get the message bundle, probably the referenced entity was deleted. Error message: @message', ['@message' => $e->getMessage()]));
      }
    }
    elseif ($message->getTemplate()->id() == 'user_joined') {
      $variables['entity_label'] = t('User');
      $variables['label_class'] = 'message--referenced-label--user';
      $create = $message->getOwner()->getCreatedTime();
      /** @var \Drupal\Core\Field\Plugin\Field\FieldType\CreatedItem $kek */
      $time = \Drupal::service('date.formatter')->format($create, 'custom', 'd/m/Y');
      $variables['created'] = $time;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openideal_theme_theme_suggestions_comment_alter(array &$suggestions, array $variables) {
  $elements = $variables['elements'];
  if (isset($elements['#view_mode'])) {
    $suggestions[] = 'comment__view_mode__' . $elements['#view_mode'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openideal_theme_preprocess_field__created(&$variables) {
  $element = $variables['element'];
  if (isset($element['#third_party_settings']['layout_builder']['view_mode'])
    && $element['#third_party_settings']['layout_builder']['view_mode'] == 'compact') {
    $variables['label'] = t('Member since:');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openideal_theme_preprocess_field__field_points(&$variables) {
  $variables['label'] = t('User points:');
}

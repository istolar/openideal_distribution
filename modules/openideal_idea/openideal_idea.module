<?php

/**
 * @file
 * Contains openideal_idea.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function openideal_idea_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_idea_form') {
    // Check challenge query parameter.
    if ($challenge_id = \Drupal::request()->get('challenge')) {
      // Load predefined challenge node.
      $predefined_challenge = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->load($challenge_id);
      if (!empty($predefined_challenge)) {
        // Set predefined challenge to the idea node form element.
        $form['field_challenge']['widget'][0]['target_id']['#default_value'] = $predefined_challenge;
      }
    }
  }

  if (!in_array($form_id, ['node_idea_edit_form', 'node_idea_form'])) {
    return;
  }

  // Get settings page for default challenge entity.
  $openideal_config = config_pages_config('openideal_configurations');
  if (!empty($openideal_config)) {
    // Get default challenge entity.
    $default_challenge = $openideal_config->field_default_challenge->entity;
  }

  if (
      !empty($default_challenge)
      && empty($form['field_challenge']['widget'][0]['target_id']['#default_value'])
  ) {
    // Set default value for challenge form element of the idea content type.
    $form['field_challenge']['widget'][0]['target_id']['#default_value'] = $default_challenge;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function openideal_idea_node_presave(EntityInterface $entity) {
  // Check entity type and duplicate_of field of the entity.
  if (
    $entity->bundle() == 'idea' &&
    !$entity->get('field_duplicate_of')->isEmpty()
  ) {
    // Set 'merged' value for idea_phase field of the entity.
    $entity->field_idea_phase->target_id = 5;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function openideal_idea_node_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'idea') {
    try {
      // Create the group for the node.
      /** @var \Drupal\group\Entity\Group $group */
      $group = \Drupal::entityTypeManager()->getStorage('group')
        ->create([
          'label' => $entity->label(),
          'type' => 'idea',
          'langcode' => 'en',
        ]);
      $group->save();
      // Define the plugin id.
      $plugin_id = 'group_node:' . $entity->bundle();
      // Add the entity to the group.
      $group->addContent($entity, $plugin_id);
    }
    catch (\Exception $e) {
      \Drupal::logger('openideal_idea')->error($e->getMessage());
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function openideal_idea_node_predelete(EntityInterface $entity) {
  if ($entity->bundle() == 'idea') {
    // Delete the group that contains this node.
    if ($group_id = _openideal_idea_get_group_id_by_entity($entity)) {
      $group = \Drupal::entityTypeManager()->getStorage('group')
        ->load($group_id);
      $group->delete();
    }
  }
}

/**
 * Get group id for specific entity.
 *
 * @param object $entity
 *   Entity instance.
 *
 * @return string|null
 *   Group id or NULL.
 */
function _openideal_idea_get_group_id_by_entity($entity) {
  $group_ids = [];
  // In our case we will have one node per group.
  // We get all group ids but return just the first one.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByEntity($entity);
  foreach ($group_contents as $group_content) {
    $group_ids[] = $group_content->getGroup()->id();
  }

  return !empty($group_ids) ? array_shift($group_ids) : NULL;
}
